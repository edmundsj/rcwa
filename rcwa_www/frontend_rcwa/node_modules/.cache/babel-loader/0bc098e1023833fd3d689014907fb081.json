{"ast":null,"code":"var openParentheses = \"(\".charCodeAt(0);\nvar closeParentheses = \")\".charCodeAt(0);\nvar singleQuote = \"'\".charCodeAt(0);\nvar doubleQuote = '\"'.charCodeAt(0);\nvar backslash = \"\\\\\".charCodeAt(0);\nvar slash = \"/\".charCodeAt(0);\nvar comma = \",\".charCodeAt(0);\nvar colon = \":\".charCodeAt(0);\nvar star = \"*\".charCodeAt(0);\n\nmodule.exports = function (input) {\n  var tokens = [];\n  var value = input;\n  var next, quote, prev, token, escape, escapePos, whitespacePos;\n  var pos = 0;\n  var code = value.charCodeAt(pos);\n  var max = value.length;\n  var stack = [{\n    nodes: tokens\n  }];\n  var balanced = 0;\n  var parent;\n  var name = \"\";\n  var before = \"\";\n  var after = \"\";\n\n  while (pos < max) {\n    // Whitespaces\n    if (code <= 32) {\n      next = pos;\n\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n\n      token = value.slice(pos, next);\n      prev = tokens[tokens.length - 1];\n\n      if (code === closeParentheses && balanced) {\n        after = token;\n      } else if (prev && prev.type === \"div\") {\n        prev.after = token;\n      } else if (code === comma || code === colon || code === slash && value.charCodeAt(next + 1) !== star) {\n        before = token;\n      } else {\n        tokens.push({\n          type: \"space\",\n          sourceIndex: pos,\n          value: token\n        });\n      }\n\n      pos = next; // Quotes\n    } else if (code === singleQuote || code === doubleQuote) {\n      next = pos;\n      quote = code === singleQuote ? \"'\" : '\"';\n      token = {\n        type: \"string\",\n        sourceIndex: pos,\n        quote: quote\n      };\n\n      do {\n        escape = false;\n        next = value.indexOf(quote, next + 1);\n\n        if (~next) {\n          escapePos = next;\n\n          while (value.charCodeAt(escapePos - 1) === backslash) {\n            escapePos -= 1;\n            escape = !escape;\n          }\n        } else {\n          value += quote;\n          next = value.length - 1;\n          token.unclosed = true;\n        }\n      } while (escape);\n\n      token.value = value.slice(pos + 1, next);\n      tokens.push(token);\n      pos = next + 1;\n      code = value.charCodeAt(pos); // Comments\n    } else if (code === slash && value.charCodeAt(pos + 1) === star) {\n      token = {\n        type: \"comment\",\n        sourceIndex: pos\n      };\n      next = value.indexOf(\"*/\", pos);\n\n      if (next === -1) {\n        token.unclosed = true;\n        next = value.length;\n      }\n\n      token.value = value.slice(pos + 2, next);\n      tokens.push(token);\n      pos = next + 2;\n      code = value.charCodeAt(pos); // Dividers\n    } else if (code === slash || code === comma || code === colon) {\n      token = value[pos];\n      tokens.push({\n        type: \"div\",\n        sourceIndex: pos - before.length,\n        value: token,\n        before: before,\n        after: \"\"\n      });\n      before = \"\";\n      pos += 1;\n      code = value.charCodeAt(pos); // Open parentheses\n    } else if (openParentheses === code) {\n      // Whitespaces after open parentheses\n      next = pos;\n\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n\n      token = {\n        type: \"function\",\n        sourceIndex: pos - name.length,\n        value: name,\n        before: value.slice(pos + 1, next)\n      };\n      pos = next;\n\n      if (name === \"url\" && code !== singleQuote && code !== doubleQuote) {\n        next -= 1;\n\n        do {\n          escape = false;\n          next = value.indexOf(\")\", next + 1);\n\n          if (~next) {\n            escapePos = next;\n\n            while (value.charCodeAt(escapePos - 1) === backslash) {\n              escapePos -= 1;\n              escape = !escape;\n            }\n          } else {\n            value += \")\";\n            next = value.length - 1;\n            token.unclosed = true;\n          }\n        } while (escape); // Whitespaces before closed\n\n\n        whitespacePos = next;\n\n        do {\n          whitespacePos -= 1;\n          code = value.charCodeAt(whitespacePos);\n        } while (code <= 32);\n\n        if (pos !== whitespacePos + 1) {\n          token.nodes = [{\n            type: \"word\",\n            sourceIndex: pos,\n            value: value.slice(pos, whitespacePos + 1)\n          }];\n        } else {\n          token.nodes = [];\n        }\n\n        if (token.unclosed && whitespacePos + 1 !== next) {\n          token.after = \"\";\n          token.nodes.push({\n            type: \"space\",\n            sourceIndex: whitespacePos + 1,\n            value: value.slice(whitespacePos + 1, next)\n          });\n        } else {\n          token.after = value.slice(whitespacePos + 1, next);\n        }\n\n        pos = next + 1;\n        code = value.charCodeAt(pos);\n        tokens.push(token);\n      } else {\n        balanced += 1;\n        token.after = \"\";\n        tokens.push(token);\n        stack.push(token);\n        tokens = token.nodes = [];\n        parent = token;\n      }\n\n      name = \"\"; // Close parentheses\n    } else if (closeParentheses === code && balanced) {\n      pos += 1;\n      code = value.charCodeAt(pos);\n      parent.after = after;\n      after = \"\";\n      balanced -= 1;\n      stack.pop();\n      parent = stack[balanced];\n      tokens = parent.nodes; // Words\n    } else {\n      next = pos;\n\n      do {\n        if (code === backslash) {\n          next += 1;\n        }\n\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (next < max && !(code <= 32 || code === singleQuote || code === doubleQuote || code === comma || code === colon || code === slash || code === openParentheses || code === closeParentheses && balanced));\n\n      token = value.slice(pos, next);\n\n      if (openParentheses === code) {\n        name = token;\n      } else {\n        tokens.push({\n          type: \"word\",\n          sourceIndex: pos,\n          value: token\n        });\n      }\n\n      pos = next;\n    }\n  }\n\n  for (pos = stack.length - 1; pos; pos -= 1) {\n    stack[pos].unclosed = true;\n  }\n\n  return stack[0].nodes;\n};","map":{"version":3,"names":["openParentheses","charCodeAt","closeParentheses","singleQuote","doubleQuote","backslash","slash","comma","colon","star","module","exports","input","tokens","value","next","quote","prev","token","escape","escapePos","whitespacePos","pos","code","max","length","stack","nodes","balanced","parent","name","before","after","slice","type","push","sourceIndex","indexOf","unclosed","pop"],"sources":["/home/foglet15/Code/Python/rcwa/rcwa_www/frontend_rcwa/node_modules/reduce-css-calc/node_modules/postcss-value-parser/lib/parse.js"],"sourcesContent":["var openParentheses = \"(\".charCodeAt(0);\nvar closeParentheses = \")\".charCodeAt(0);\nvar singleQuote = \"'\".charCodeAt(0);\nvar doubleQuote = '\"'.charCodeAt(0);\nvar backslash = \"\\\\\".charCodeAt(0);\nvar slash = \"/\".charCodeAt(0);\nvar comma = \",\".charCodeAt(0);\nvar colon = \":\".charCodeAt(0);\nvar star = \"*\".charCodeAt(0);\n\nmodule.exports = function(input) {\n  var tokens = [];\n  var value = input;\n\n  var next, quote, prev, token, escape, escapePos, whitespacePos;\n  var pos = 0;\n  var code = value.charCodeAt(pos);\n  var max = value.length;\n  var stack = [{ nodes: tokens }];\n  var balanced = 0;\n  var parent;\n\n  var name = \"\";\n  var before = \"\";\n  var after = \"\";\n\n  while (pos < max) {\n    // Whitespaces\n    if (code <= 32) {\n      next = pos;\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n      token = value.slice(pos, next);\n\n      prev = tokens[tokens.length - 1];\n      if (code === closeParentheses && balanced) {\n        after = token;\n      } else if (prev && prev.type === \"div\") {\n        prev.after = token;\n      } else if (\n        code === comma ||\n        code === colon ||\n        (code === slash && value.charCodeAt(next + 1) !== star)\n      ) {\n        before = token;\n      } else {\n        tokens.push({\n          type: \"space\",\n          sourceIndex: pos,\n          value: token\n        });\n      }\n\n      pos = next;\n\n      // Quotes\n    } else if (code === singleQuote || code === doubleQuote) {\n      next = pos;\n      quote = code === singleQuote ? \"'\" : '\"';\n      token = {\n        type: \"string\",\n        sourceIndex: pos,\n        quote: quote\n      };\n      do {\n        escape = false;\n        next = value.indexOf(quote, next + 1);\n        if (~next) {\n          escapePos = next;\n          while (value.charCodeAt(escapePos - 1) === backslash) {\n            escapePos -= 1;\n            escape = !escape;\n          }\n        } else {\n          value += quote;\n          next = value.length - 1;\n          token.unclosed = true;\n        }\n      } while (escape);\n      token.value = value.slice(pos + 1, next);\n\n      tokens.push(token);\n      pos = next + 1;\n      code = value.charCodeAt(pos);\n\n      // Comments\n    } else if (code === slash && value.charCodeAt(pos + 1) === star) {\n      token = {\n        type: \"comment\",\n        sourceIndex: pos\n      };\n\n      next = value.indexOf(\"*/\", pos);\n      if (next === -1) {\n        token.unclosed = true;\n        next = value.length;\n      }\n\n      token.value = value.slice(pos + 2, next);\n      tokens.push(token);\n\n      pos = next + 2;\n      code = value.charCodeAt(pos);\n\n      // Dividers\n    } else if (code === slash || code === comma || code === colon) {\n      token = value[pos];\n\n      tokens.push({\n        type: \"div\",\n        sourceIndex: pos - before.length,\n        value: token,\n        before: before,\n        after: \"\"\n      });\n      before = \"\";\n\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      // Open parentheses\n    } else if (openParentheses === code) {\n      // Whitespaces after open parentheses\n      next = pos;\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n      token = {\n        type: \"function\",\n        sourceIndex: pos - name.length,\n        value: name,\n        before: value.slice(pos + 1, next)\n      };\n      pos = next;\n\n      if (name === \"url\" && code !== singleQuote && code !== doubleQuote) {\n        next -= 1;\n        do {\n          escape = false;\n          next = value.indexOf(\")\", next + 1);\n          if (~next) {\n            escapePos = next;\n            while (value.charCodeAt(escapePos - 1) === backslash) {\n              escapePos -= 1;\n              escape = !escape;\n            }\n          } else {\n            value += \")\";\n            next = value.length - 1;\n            token.unclosed = true;\n          }\n        } while (escape);\n        // Whitespaces before closed\n        whitespacePos = next;\n        do {\n          whitespacePos -= 1;\n          code = value.charCodeAt(whitespacePos);\n        } while (code <= 32);\n        if (pos !== whitespacePos + 1) {\n          token.nodes = [\n            {\n              type: \"word\",\n              sourceIndex: pos,\n              value: value.slice(pos, whitespacePos + 1)\n            }\n          ];\n        } else {\n          token.nodes = [];\n        }\n        if (token.unclosed && whitespacePos + 1 !== next) {\n          token.after = \"\";\n          token.nodes.push({\n            type: \"space\",\n            sourceIndex: whitespacePos + 1,\n            value: value.slice(whitespacePos + 1, next)\n          });\n        } else {\n          token.after = value.slice(whitespacePos + 1, next);\n        }\n        pos = next + 1;\n        code = value.charCodeAt(pos);\n        tokens.push(token);\n      } else {\n        balanced += 1;\n        token.after = \"\";\n        tokens.push(token);\n        stack.push(token);\n        tokens = token.nodes = [];\n        parent = token;\n      }\n      name = \"\";\n\n      // Close parentheses\n    } else if (closeParentheses === code && balanced) {\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      parent.after = after;\n      after = \"\";\n      balanced -= 1;\n      stack.pop();\n      parent = stack[balanced];\n      tokens = parent.nodes;\n\n      // Words\n    } else {\n      next = pos;\n      do {\n        if (code === backslash) {\n          next += 1;\n        }\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (\n        next < max &&\n        !(\n          code <= 32 ||\n          code === singleQuote ||\n          code === doubleQuote ||\n          code === comma ||\n          code === colon ||\n          code === slash ||\n          code === openParentheses ||\n          (code === closeParentheses && balanced)\n        )\n      );\n      token = value.slice(pos, next);\n\n      if (openParentheses === code) {\n        name = token;\n      } else {\n        tokens.push({\n          type: \"word\",\n          sourceIndex: pos,\n          value: token\n        });\n      }\n\n      pos = next;\n    }\n  }\n\n  for (pos = stack.length - 1; pos; pos -= 1) {\n    stack[pos].unclosed = true;\n  }\n\n  return stack[0].nodes;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}