{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.flip = flip;\n\nvar _convert = require(\"./convert\");\n\nvar _convert2 = _interopRequireDefault(_convert);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction reduce(node, precision) {\n  if (node.type === \"MathExpression\") return reduceMathExpression(node, precision);\n  if (node.type === \"Calc\") return reduce(node.value, precision);\n  return node;\n}\n\nfunction isEqual(left, right) {\n  return left.type === right.type && left.value === right.value;\n}\n\nfunction isValueType(type) {\n  switch (type) {\n    case 'LengthValue':\n    case 'AngleValue':\n    case 'TimeValue':\n    case 'FrequencyValue':\n    case 'ResolutionValue':\n    case 'EmValue':\n    case 'ExValue':\n    case 'ChValue':\n    case 'RemValue':\n    case 'VhValue':\n    case 'VwValue':\n    case 'VminValue':\n    case 'VmaxValue':\n    case 'PercentageValue':\n    case 'Value':\n      return true;\n  }\n\n  return false;\n}\n\nfunction convertMathExpression(node, precision) {\n  var nodes = (0, _convert2.default)(node.left, node.right, precision);\n  var left = reduce(nodes.left, precision);\n  var right = reduce(nodes.right, precision);\n\n  if (left.type === \"MathExpression\" && right.type === \"MathExpression\") {\n    if (left.operator === '/' && right.operator === '*' || left.operator === '-' && right.operator === '+' || left.operator === '*' && right.operator === '/' || left.operator === '+' && right.operator === '-') {\n      if (isEqual(left.right, right.right)) nodes = (0, _convert2.default)(left.left, right.left, precision);else if (isEqual(left.right, right.left)) nodes = (0, _convert2.default)(left.left, right.right, precision);\n      left = reduce(nodes.left, precision);\n      right = reduce(nodes.right, precision);\n    }\n  }\n\n  node.left = left;\n  node.right = right;\n  return node;\n}\n\nfunction flip(operator) {\n  return operator === '+' ? '-' : '+';\n}\n\nfunction flipValue(node) {\n  if (isValueType(node.type)) node.value = -node.value;else if (node.type == 'MathExpression') {\n    node.left = flipValue(node.left);\n    node.right = flipValue(node.right);\n  }\n  return node;\n}\n\nfunction reduceAddSubExpression(node, precision) {\n  var _node = node,\n      left = _node.left,\n      right = _node.right,\n      op = _node.operator;\n  if (left.type === 'CssVariable' || right.type === 'CssVariable') return node; // something + 0 => something\n  // something - 0 => something\n\n  if (right.value === 0) return left; // 0 + something => something\n\n  if (left.value === 0 && op === \"+\") return right; // 0 - something => -something\n\n  if (left.value === 0 && op === \"-\") return flipValue(right); // value + value\n  // value - value\n\n  if (left.type === right.type && isValueType(left.type)) {\n    node = Object.assign({}, left);\n    if (op === \"+\") node.value = left.value + right.value;else node.value = left.value - right.value;\n  } // value <op> (expr)\n\n\n  if (isValueType(left.type) && (right.operator === '+' || right.operator === '-') && right.type === 'MathExpression') {\n    // value + (value + something) => (value + value) + something\n    // value + (value - something) => (value + value) - something\n    // value - (value + something) => (value - value) - something\n    // value - (value - something) => (value - value) + something\n    if (left.type === right.left.type) {\n      node = Object.assign({}, node);\n      node.left = reduce({\n        type: 'MathExpression',\n        operator: op,\n        left: left,\n        right: right.left\n      }, precision);\n      node.right = right.right;\n      node.operator = op === '-' ? flip(right.operator) : right.operator;\n      return reduce(node, precision);\n    } // value + (something + value) => (value + value) + something\n    // value + (something - value) => (value - value) + something\n    // value - (something + value) => (value - value) - something\n    // value - (something - value) => (value + value) - something\n    else if (left.type === right.right.type) {\n      node = Object.assign({}, node);\n      node.left = reduce({\n        type: 'MathExpression',\n        operator: op === '-' ? flip(right.operator) : right.operator,\n        left: left,\n        right: right.right\n      }, precision);\n      node.right = right.left;\n      return reduce(node, precision);\n    }\n  } // (expr) <op> value\n\n\n  if (left.type === 'MathExpression' && (left.operator === '+' || left.operator === '-') && isValueType(right.type)) {\n    // (value + something) + value => (value + value) + something\n    // (value - something) + value => (value + value) - something\n    // (value + something) - value => (value - value) + something\n    // (value - something) - value => (value - value) - something\n    if (right.type === left.left.type) {\n      node = Object.assign({}, left);\n      node.left = reduce({\n        type: 'MathExpression',\n        operator: op,\n        left: left.left,\n        right: right\n      }, precision);\n      return reduce(node, precision);\n    } // (something + value) + value => something + (value + value)\n    // (something - value1) + value2 => something - (value2 - value1)\n    // (something + value) - value => something + (value - value)\n    // (something - value) - value => something - (value + value)\n    else if (right.type === left.right.type) {\n      node = Object.assign({}, left);\n\n      if (left.operator === '-') {\n        node.right = reduce({\n          type: 'MathExpression',\n          operator: op === '-' ? '+' : '-',\n          left: right,\n          right: left.right\n        }, precision);\n        node.operator = op === '-' ? '-' : '+';\n      } else {\n        node.right = reduce({\n          type: 'MathExpression',\n          operator: op,\n          left: left.right,\n          right: right\n        }, precision);\n      }\n\n      if (node.right.value < 0) {\n        node.right.value *= -1;\n        node.operator = node.operator === '-' ? '+' : '-';\n      }\n\n      return reduce(node, precision);\n    }\n  }\n\n  return node;\n}\n\nfunction reduceDivisionExpression(node, precision) {\n  if (!isValueType(node.right.type)) return node;\n  if (node.right.type !== 'Value') throw new Error(\"Cannot divide by \\\"\" + node.right.unit + \"\\\", number expected\");\n  if (node.right.value === 0) throw new Error('Cannot divide by zero'); // (expr) / value\n\n  if (node.left.type === 'MathExpression') {\n    if (isValueType(node.left.left.type) && isValueType(node.left.right.type)) {\n      node.left.left.value /= node.right.value;\n      node.left.right.value /= node.right.value;\n      return reduce(node.left, precision);\n    }\n\n    return node;\n  } // something / value\n  else if (isValueType(node.left.type)) {\n    node.left.value /= node.right.value;\n    return node.left;\n  }\n\n  return node;\n}\n\nfunction reduceMultiplicationExpression(node) {\n  // (expr) * value\n  if (node.left.type === 'MathExpression' && node.right.type === 'Value') {\n    if (isValueType(node.left.left.type) && isValueType(node.left.right.type)) {\n      node.left.left.value *= node.right.value;\n      node.left.right.value *= node.right.value;\n      return node.left;\n    }\n  } // something * value\n  else if (isValueType(node.left.type) && node.right.type === 'Value') {\n    node.left.value *= node.right.value;\n    return node.left;\n  } // value * (expr)\n  else if (node.left.type === 'Value' && node.right.type === 'MathExpression') {\n    if (isValueType(node.right.left.type) && isValueType(node.right.right.type)) {\n      node.right.left.value *= node.left.value;\n      node.right.right.value *= node.left.value;\n      return node.right;\n    }\n  } // value * something\n  else if (node.left.type === 'Value' && isValueType(node.right.type)) {\n    node.right.value *= node.left.value;\n    return node.right;\n  }\n\n  return node;\n}\n\nfunction reduceMathExpression(node, precision) {\n  node = convertMathExpression(node, precision);\n\n  switch (node.operator) {\n    case \"+\":\n    case \"-\":\n      return reduceAddSubExpression(node, precision);\n\n    case \"/\":\n      return reduceDivisionExpression(node, precision);\n\n    case \"*\":\n      return reduceMultiplicationExpression(node);\n  }\n\n  return node;\n}\n\nexports.default = reduce;","map":{"version":3,"names":["Object","defineProperty","exports","value","flip","_convert","require","_convert2","_interopRequireDefault","obj","__esModule","default","reduce","node","precision","type","reduceMathExpression","isEqual","left","right","isValueType","convertMathExpression","nodes","operator","flipValue","reduceAddSubExpression","_node","op","assign","reduceDivisionExpression","Error","unit","reduceMultiplicationExpression"],"sources":["/home/foglet15/Code/Python/rcwa/rcwa_www/frontend_rcwa/node_modules/reduce-css-calc/dist/lib/reducer.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.flip = flip;\n\nvar _convert = require(\"./convert\");\n\nvar _convert2 = _interopRequireDefault(_convert);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction reduce(node, precision) {\n  if (node.type === \"MathExpression\") return reduceMathExpression(node, precision);\n  if (node.type === \"Calc\") return reduce(node.value, precision);\n\n  return node;\n}\n\nfunction isEqual(left, right) {\n  return left.type === right.type && left.value === right.value;\n}\n\nfunction isValueType(type) {\n  switch (type) {\n    case 'LengthValue':\n    case 'AngleValue':\n    case 'TimeValue':\n    case 'FrequencyValue':\n    case 'ResolutionValue':\n    case 'EmValue':\n    case 'ExValue':\n    case 'ChValue':\n    case 'RemValue':\n    case 'VhValue':\n    case 'VwValue':\n    case 'VminValue':\n    case 'VmaxValue':\n    case 'PercentageValue':\n    case 'Value':\n      return true;\n  }\n  return false;\n}\n\nfunction convertMathExpression(node, precision) {\n  var nodes = (0, _convert2.default)(node.left, node.right, precision);\n  var left = reduce(nodes.left, precision);\n  var right = reduce(nodes.right, precision);\n\n  if (left.type === \"MathExpression\" && right.type === \"MathExpression\") {\n\n    if (left.operator === '/' && right.operator === '*' || left.operator === '-' && right.operator === '+' || left.operator === '*' && right.operator === '/' || left.operator === '+' && right.operator === '-') {\n\n      if (isEqual(left.right, right.right)) nodes = (0, _convert2.default)(left.left, right.left, precision);else if (isEqual(left.right, right.left)) nodes = (0, _convert2.default)(left.left, right.right, precision);\n\n      left = reduce(nodes.left, precision);\n      right = reduce(nodes.right, precision);\n    }\n  }\n\n  node.left = left;\n  node.right = right;\n  return node;\n}\n\nfunction flip(operator) {\n  return operator === '+' ? '-' : '+';\n}\n\nfunction flipValue(node) {\n  if (isValueType(node.type)) node.value = -node.value;else if (node.type == 'MathExpression') {\n    node.left = flipValue(node.left);\n    node.right = flipValue(node.right);\n  }\n  return node;\n}\n\nfunction reduceAddSubExpression(node, precision) {\n  var _node = node,\n      left = _node.left,\n      right = _node.right,\n      op = _node.operator;\n\n\n  if (left.type === 'CssVariable' || right.type === 'CssVariable') return node;\n\n  // something + 0 => something\n  // something - 0 => something\n  if (right.value === 0) return left;\n\n  // 0 + something => something\n  if (left.value === 0 && op === \"+\") return right;\n\n  // 0 - something => -something\n  if (left.value === 0 && op === \"-\") return flipValue(right);\n\n  // value + value\n  // value - value\n  if (left.type === right.type && isValueType(left.type)) {\n    node = Object.assign({}, left);\n    if (op === \"+\") node.value = left.value + right.value;else node.value = left.value - right.value;\n  }\n\n  // value <op> (expr)\n  if (isValueType(left.type) && (right.operator === '+' || right.operator === '-') && right.type === 'MathExpression') {\n    // value + (value + something) => (value + value) + something\n    // value + (value - something) => (value + value) - something\n    // value - (value + something) => (value - value) - something\n    // value - (value - something) => (value - value) + something\n    if (left.type === right.left.type) {\n      node = Object.assign({}, node);\n      node.left = reduce({\n        type: 'MathExpression',\n        operator: op,\n        left: left,\n        right: right.left\n      }, precision);\n      node.right = right.right;\n      node.operator = op === '-' ? flip(right.operator) : right.operator;\n      return reduce(node, precision);\n    }\n    // value + (something + value) => (value + value) + something\n    // value + (something - value) => (value - value) + something\n    // value - (something + value) => (value - value) - something\n    // value - (something - value) => (value + value) - something\n    else if (left.type === right.right.type) {\n        node = Object.assign({}, node);\n        node.left = reduce({\n          type: 'MathExpression',\n          operator: op === '-' ? flip(right.operator) : right.operator,\n          left: left,\n          right: right.right\n        }, precision);\n        node.right = right.left;\n        return reduce(node, precision);\n      }\n  }\n\n  // (expr) <op> value\n  if (left.type === 'MathExpression' && (left.operator === '+' || left.operator === '-') && isValueType(right.type)) {\n    // (value + something) + value => (value + value) + something\n    // (value - something) + value => (value + value) - something\n    // (value + something) - value => (value - value) + something\n    // (value - something) - value => (value - value) - something\n    if (right.type === left.left.type) {\n      node = Object.assign({}, left);\n      node.left = reduce({\n        type: 'MathExpression',\n        operator: op,\n        left: left.left,\n        right: right\n      }, precision);\n      return reduce(node, precision);\n    }\n    // (something + value) + value => something + (value + value)\n    // (something - value1) + value2 => something - (value2 - value1)\n    // (something + value) - value => something + (value - value)\n    // (something - value) - value => something - (value + value)\n    else if (right.type === left.right.type) {\n        node = Object.assign({}, left);\n        if (left.operator === '-') {\n          node.right = reduce({\n            type: 'MathExpression',\n            operator: op === '-' ? '+' : '-',\n            left: right,\n            right: left.right\n          }, precision);\n          node.operator = op === '-' ? '-' : '+';\n        } else {\n          node.right = reduce({\n            type: 'MathExpression',\n            operator: op,\n            left: left.right,\n            right: right\n          }, precision);\n        }\n        if (node.right.value < 0) {\n          node.right.value *= -1;\n          node.operator = node.operator === '-' ? '+' : '-';\n        }\n        return reduce(node, precision);\n      }\n  }\n  return node;\n}\n\nfunction reduceDivisionExpression(node, precision) {\n  if (!isValueType(node.right.type)) return node;\n\n  if (node.right.type !== 'Value') throw new Error(\"Cannot divide by \\\"\" + node.right.unit + \"\\\", number expected\");\n\n  if (node.right.value === 0) throw new Error('Cannot divide by zero');\n\n  // (expr) / value\n  if (node.left.type === 'MathExpression') {\n    if (isValueType(node.left.left.type) && isValueType(node.left.right.type)) {\n      node.left.left.value /= node.right.value;\n      node.left.right.value /= node.right.value;\n      return reduce(node.left, precision);\n    }\n    return node;\n  }\n  // something / value\n  else if (isValueType(node.left.type)) {\n      node.left.value /= node.right.value;\n      return node.left;\n    }\n  return node;\n}\n\nfunction reduceMultiplicationExpression(node) {\n  // (expr) * value\n  if (node.left.type === 'MathExpression' && node.right.type === 'Value') {\n    if (isValueType(node.left.left.type) && isValueType(node.left.right.type)) {\n      node.left.left.value *= node.right.value;\n      node.left.right.value *= node.right.value;\n      return node.left;\n    }\n  }\n  // something * value\n  else if (isValueType(node.left.type) && node.right.type === 'Value') {\n      node.left.value *= node.right.value;\n      return node.left;\n    }\n    // value * (expr)\n    else if (node.left.type === 'Value' && node.right.type === 'MathExpression') {\n        if (isValueType(node.right.left.type) && isValueType(node.right.right.type)) {\n          node.right.left.value *= node.left.value;\n          node.right.right.value *= node.left.value;\n          return node.right;\n        }\n      }\n      // value * something\n      else if (node.left.type === 'Value' && isValueType(node.right.type)) {\n          node.right.value *= node.left.value;\n          return node.right;\n        }\n  return node;\n}\n\nfunction reduceMathExpression(node, precision) {\n  node = convertMathExpression(node, precision);\n\n  switch (node.operator) {\n    case \"+\":\n    case \"-\":\n      return reduceAddSubExpression(node, precision);\n    case \"/\":\n      return reduceDivisionExpression(node, precision);\n    case \"*\":\n      return reduceMultiplicationExpression(node);\n  }\n  return node;\n}\n\nexports.default = reduce;"],"mappings":"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"},"metadata":{},"sourceType":"script"}