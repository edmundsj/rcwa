{"ast":null,"code":"import { InternSet } from \"internmap\";\nexport default function disjoint(values, other) {\n  const iterator = other[Symbol.iterator](),\n        set = new InternSet();\n\n  for (const v of values) {\n    if (set.has(v)) return false;\n    let value, done;\n\n    while (({\n      value,\n      done\n    } = iterator.next())) {\n      if (done) break;\n      if (Object.is(v, value)) return false;\n      set.add(value);\n    }\n  }\n\n  return true;\n}","map":{"version":3,"names":["InternSet","disjoint","values","other","iterator","Symbol","set","v","has","value","done","next","Object","is","add"],"sources":["/home/foglet15/Code/Python/rcwa/rcwa_www/frontend_rcwa/node_modules/d3-array/src/disjoint.js"],"sourcesContent":["import {InternSet} from \"internmap\";\n\nexport default function disjoint(values, other) {\n  const iterator = other[Symbol.iterator](), set = new InternSet();\n  for (const v of values) {\n    if (set.has(v)) return false;\n    let value, done;\n    while (({value, done} = iterator.next())) {\n      if (done) break;\n      if (Object.is(v, value)) return false;\n      set.add(value);\n    }\n  }\n  return true;\n}\n"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,WAAxB;AAEA,eAAe,SAASC,QAAT,CAAkBC,MAAlB,EAA0BC,KAA1B,EAAiC;EAC9C,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAACD,QAAR,CAAL,EAAjB;EAAA,MAA2CE,GAAG,GAAG,IAAIN,SAAJ,EAAjD;;EACA,KAAK,MAAMO,CAAX,IAAgBL,MAAhB,EAAwB;IACtB,IAAII,GAAG,CAACE,GAAJ,CAAQD,CAAR,CAAJ,EAAgB,OAAO,KAAP;IAChB,IAAIE,KAAJ,EAAWC,IAAX;;IACA,QAAQ;MAACD,KAAD;MAAQC;IAAR,IAAgBN,QAAQ,CAACO,IAAT,EAAxB,GAA0C;MACxC,IAAID,IAAJ,EAAU;MACV,IAAIE,MAAM,CAACC,EAAP,CAAUN,CAAV,EAAaE,KAAb,CAAJ,EAAyB,OAAO,KAAP;MACzBH,GAAG,CAACQ,GAAJ,CAAQL,KAAR;IACD;EACF;;EACD,OAAO,IAAP;AACD"},"metadata":{},"sourceType":"module"}