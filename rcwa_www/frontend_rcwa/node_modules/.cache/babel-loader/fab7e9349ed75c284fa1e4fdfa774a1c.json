{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global[\"fast-equals\"] = {}));\n})(this, function (exports) {\n  'use strict';\n\n  var HAS_WEAKSET_SUPPORT = typeof WeakSet === 'function';\n  var keys = Object.keys;\n  /**\r\n   * are the values passed strictly equal or both NaN\r\n   *\r\n   * @param a the value to compare against\r\n   * @param b the value to test\r\n   * @returns are the values equal by the SameValueZero principle\r\n   */\n\n  function sameValueZeroEqual(a, b) {\n    return a === b || a !== a && b !== b;\n  }\n  /**\r\n   * is the value a plain object\r\n   *\r\n   * @param value the value to test\r\n   * @returns is the value a plain object\r\n   */\n\n\n  function isPlainObject(value) {\n    return value.constructor === Object || value.constructor == null;\n  }\n  /**\r\n   * is the value promise-like (meaning it is thenable)\r\n   *\r\n   * @param value the value to test\r\n   * @returns is the value promise-like\r\n   */\n\n\n  function isPromiseLike(value) {\n    return !!value && typeof value.then === 'function';\n  }\n  /**\r\n   * is the value passed a react element\r\n   *\r\n   * @param value the value to test\r\n   * @returns is the value a react element\r\n   */\n\n\n  function isReactElement(value) {\n    return !!(value && value.$$typeof);\n  }\n  /**\r\n   * in cases where WeakSet is not supported, creates a new custom\r\n   * object that mimics the necessary API aspects for cache purposes\r\n   *\r\n   * @returns the new cache object\r\n   */\n\n\n  function getNewCacheFallback() {\n    var values = [];\n    return {\n      add: function (value) {\n        values.push(value);\n      },\n      has: function (value) {\n        return values.indexOf(value) !== -1;\n      }\n    };\n  }\n  /**\r\n   * get a new cache object to prevent circular references\r\n   *\r\n   * @returns the new cache object\r\n   */\n\n\n  var getNewCache = function (canUseWeakMap) {\n    if (canUseWeakMap) {\n      return function _getNewCache() {\n        return new WeakSet();\n      };\n    }\n\n    return getNewCacheFallback;\n  }(HAS_WEAKSET_SUPPORT);\n  /**\r\n   * create a custom isEqual handler specific to circular objects\r\n   *\r\n   * @param [isEqual] the isEqual comparator to use instead of isDeepEqual\r\n   * @returns the method to create the `isEqual` function\r\n   */\n\n\n  function createCircularEqualCreator(isEqual) {\n    return function createCircularEqual(comparator) {\n      var _comparator = isEqual || comparator;\n\n      return function circularEqual(a, b, cache) {\n        if (cache === void 0) {\n          cache = getNewCache();\n        }\n\n        var isCacheableA = !!a && typeof a === 'object';\n        var isCacheableB = !!b && typeof b === 'object';\n\n        if (isCacheableA || isCacheableB) {\n          var hasA = isCacheableA && cache.has(a);\n          var hasB = isCacheableB && cache.has(b);\n\n          if (hasA || hasB) {\n            return hasA && hasB;\n          }\n\n          if (isCacheableA) {\n            cache.add(a);\n          }\n\n          if (isCacheableB) {\n            cache.add(b);\n          }\n        }\n\n        return _comparator(a, b, cache);\n      };\n    };\n  }\n  /**\r\n   * are the arrays equal in value\r\n   *\r\n   * @param a the array to test\r\n   * @param b the array to test against\r\n   * @param isEqual the comparator to determine equality\r\n   * @param meta the meta object to pass through\r\n   * @returns are the arrays equal\r\n   */\n\n\n  function areArraysEqual(a, b, isEqual, meta) {\n    var index = a.length;\n\n    if (b.length !== index) {\n      return false;\n    }\n\n    while (index-- > 0) {\n      if (!isEqual(a[index], b[index], meta)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\r\n   * are the maps equal in value\r\n   *\r\n   * @param a the map to test\r\n   * @param b the map to test against\r\n   * @param isEqual the comparator to determine equality\r\n   * @param meta the meta map to pass through\r\n   * @returns are the maps equal\r\n   */\n\n\n  function areMapsEqual(a, b, isEqual, meta) {\n    var isValueEqual = a.size === b.size;\n\n    if (isValueEqual && a.size) {\n      var matchedIndices_1 = {};\n      a.forEach(function (aValue, aKey) {\n        if (isValueEqual) {\n          var hasMatch_1 = false;\n          var matchIndex_1 = 0;\n          b.forEach(function (bValue, bKey) {\n            if (!hasMatch_1 && !matchedIndices_1[matchIndex_1]) {\n              hasMatch_1 = isEqual(aKey, bKey, meta) && isEqual(aValue, bValue, meta);\n\n              if (hasMatch_1) {\n                matchedIndices_1[matchIndex_1] = true;\n              }\n            }\n\n            matchIndex_1++;\n          });\n          isValueEqual = hasMatch_1;\n        }\n      });\n    }\n\n    return isValueEqual;\n  }\n\n  var OWNER = '_owner';\n  var hasOwnProperty = Function.prototype.bind.call(Function.prototype.call, Object.prototype.hasOwnProperty);\n  /**\r\n   * are the objects equal in value\r\n   *\r\n   * @param a the object to test\r\n   * @param b the object to test against\r\n   * @param isEqual the comparator to determine equality\r\n   * @param meta the meta object to pass through\r\n   * @returns are the objects equal\r\n   */\n\n  function areObjectsEqual(a, b, isEqual, meta) {\n    var keysA = keys(a);\n    var index = keysA.length;\n\n    if (keys(b).length !== index) {\n      return false;\n    }\n\n    if (index) {\n      var key = void 0;\n\n      while (index-- > 0) {\n        key = keysA[index];\n\n        if (key === OWNER) {\n          var reactElementA = isReactElement(a);\n          var reactElementB = isReactElement(b);\n\n          if ((reactElementA || reactElementB) && reactElementA !== reactElementB) {\n            return false;\n          }\n        }\n\n        if (!hasOwnProperty(b, key) || !isEqual(a[key], b[key], meta)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\r\n   * are the regExps equal in value\r\n   *\r\n   * @param a the regExp to test\r\n   * @param b the regExp to test agains\r\n   * @returns are the regExps equal\r\n   */\n\n\n  function areRegExpsEqual(a, b) {\n    return a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.unicode === b.unicode && a.sticky === b.sticky && a.lastIndex === b.lastIndex;\n  }\n  /**\r\n   * are the sets equal in value\r\n   *\r\n   * @param a the set to test\r\n   * @param b the set to test against\r\n   * @param isEqual the comparator to determine equality\r\n   * @param meta the meta set to pass through\r\n   * @returns are the sets equal\r\n   */\n\n\n  function areSetsEqual(a, b, isEqual, meta) {\n    var isValueEqual = a.size === b.size;\n\n    if (isValueEqual && a.size) {\n      var matchedIndices_2 = {};\n      a.forEach(function (aValue) {\n        if (isValueEqual) {\n          var hasMatch_2 = false;\n          var matchIndex_2 = 0;\n          b.forEach(function (bValue) {\n            if (!hasMatch_2 && !matchedIndices_2[matchIndex_2]) {\n              hasMatch_2 = isEqual(aValue, bValue, meta);\n\n              if (hasMatch_2) {\n                matchedIndices_2[matchIndex_2] = true;\n              }\n            }\n\n            matchIndex_2++;\n          });\n          isValueEqual = hasMatch_2;\n        }\n      });\n    }\n\n    return isValueEqual;\n  }\n\n  var HAS_MAP_SUPPORT = typeof Map === 'function';\n  var HAS_SET_SUPPORT = typeof Set === 'function';\n\n  function createComparator(createIsEqual) {\n    var isEqual =\n    /* eslint-disable no-use-before-define */\n    typeof createIsEqual === 'function' ? createIsEqual(comparator) : comparator;\n    /* eslint-enable */\n\n    /**\r\n     * compare the value of the two objects and return true if they are equivalent in values\r\n     *\r\n     * @param a the value to test against\r\n     * @param b the value to test\r\n     * @param [meta] an optional meta object that is passed through to all equality test calls\r\n     * @returns are a and b equivalent in value\r\n     */\n\n    function comparator(a, b, meta) {\n      if (a === b) {\n        return true;\n      }\n\n      if (a && b && typeof a === 'object' && typeof b === 'object') {\n        if (isPlainObject(a) && isPlainObject(b)) {\n          return areObjectsEqual(a, b, isEqual, meta);\n        }\n\n        var aShape = Array.isArray(a);\n        var bShape = Array.isArray(b);\n\n        if (aShape || bShape) {\n          return aShape === bShape && areArraysEqual(a, b, isEqual, meta);\n        }\n\n        aShape = a instanceof Date;\n        bShape = b instanceof Date;\n\n        if (aShape || bShape) {\n          return aShape === bShape && sameValueZeroEqual(a.getTime(), b.getTime());\n        }\n\n        aShape = a instanceof RegExp;\n        bShape = b instanceof RegExp;\n\n        if (aShape || bShape) {\n          return aShape === bShape && areRegExpsEqual(a, b);\n        }\n\n        if (isPromiseLike(a) || isPromiseLike(b)) {\n          return a === b;\n        }\n\n        if (HAS_MAP_SUPPORT) {\n          aShape = a instanceof Map;\n          bShape = b instanceof Map;\n\n          if (aShape || bShape) {\n            return aShape === bShape && areMapsEqual(a, b, isEqual, meta);\n          }\n        }\n\n        if (HAS_SET_SUPPORT) {\n          aShape = a instanceof Set;\n          bShape = b instanceof Set;\n\n          if (aShape || bShape) {\n            return aShape === bShape && areSetsEqual(a, b, isEqual, meta);\n          }\n        }\n\n        return areObjectsEqual(a, b, isEqual, meta);\n      }\n\n      return a !== a && b !== b;\n    }\n\n    return comparator;\n  }\n\n  var deepEqual = createComparator();\n  var shallowEqual = createComparator(function () {\n    return sameValueZeroEqual;\n  });\n  var circularDeepEqual = createComparator(createCircularEqualCreator());\n  var circularShallowEqual = createComparator(createCircularEqualCreator(sameValueZeroEqual));\n  exports.circularDeepEqual = circularDeepEqual;\n  exports.circularShallowEqual = circularShallowEqual;\n  exports.createCustomEqual = createComparator;\n  exports.deepEqual = deepEqual;\n  exports.sameValueZeroEqual = sameValueZeroEqual;\n  exports.shallowEqual = shallowEqual;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"mappings":";;;;;EAAA,IAAMA,mBAAmB,GAAG,OAAOC,OAAP,KAAmB,UAA/C;EAEQ,QAAI,GAAKC,MAAM,KAAf;EASR;;;;;;;;WAOgBC,mBAAmBC,GAAQC,GAAM;IAC/C,OAAOD,CAAC,KAAKC,CAAN,IAAYD,CAAC,KAAKA,CAAN,IAAWC,CAAC,KAAKA,CAApC;EACD;EAED;;;;;;;;WAMgBC,cAAcC,OAAU;IACtC,OAAOA,KAAK,CAACC,WAAN,KAAsBN,MAAtB,IAAgCK,KAAK,CAACC,WAAN,IAAqB,IAA5D;EACD;EAED;;;;;;;;WAMgBC,cAAcF,OAAU;IACtC,OAAO,CAAC,CAACA,KAAF,IAAW,OAAOA,KAAK,CAACG,IAAb,KAAsB,UAAxC;EACD;EAED;;;;;;;;WAMgBC,eAAeJ,OAAU;IACvC,OAAO,CAAC,EAAEA,KAAK,IAAIA,KAAK,CAACK,QAAjB,CAAR;EACD;EAED;;;;;;;;WAMgBC,sBAAmB;IACjC,IAAMC,MAAM,GAAU,EAAtB;IAEA,OAAO;MACLC,GAAG,EAAH,UAAIR,KAAJ,EAAc;QACZO,MAAM,CAACE,IAAP,CAAYT,KAAZ;MACD,CAHI;MAKLU,GAAG,EAAH,UAAIV,KAAJ,EAAc;QACZ,OAAOO,MAAM,CAACI,OAAP,CAAeX,KAAf,MAA0B,CAAC,CAAlC;MACD;IAPI,CAAP;EASD;EAED;;;;;;;EAKO,IAAMY,WAAW,GAAI,UAACC,aAAD,EAAuB;IACjD,IAAIA,aAAJ,EAAmB;MACjB,OAAO,SAASC,YAAT,GAAqB;QAC1B,OAAO,IAAIpB,OAAJ,EAAP;MACD,CAFD;IAGD;;IAED,OAAOY,mBAAP;EACD,CAR0B,CAQxBb,mBARwB,CAApB;EAUP;;;;;;;;WAMgBsB,2BAA2BC,SAA4B;IACrE,OAAO,SAASC,mBAAT,CAA6BC,UAA7B,EAA2D;MAChE,IAAMC,WAAW,GAAGH,OAAO,IAAIE,UAA/B;;MAEA,OAAO,SAASE,aAAT,CACLvB,CADK,EAELC,CAFK,EAGLuB,KAHK,EAGuB;QAA5B;UAAAA,QAAeT,WAAW,EAA1B;QAA4B;;QAE5B,IAAMU,YAAY,GAAG,CAAC,CAACzB,CAAF,IAAO,OAAOA,CAAP,KAAa,QAAzC;QACA,IAAM0B,YAAY,GAAG,CAAC,CAACzB,CAAF,IAAO,OAAOA,CAAP,KAAa,QAAzC;;QAEA,IAAIwB,YAAY,IAAIC,YAApB,EAAkC;UAChC,IAAMC,IAAI,GAAGF,YAAY,IAAID,KAAK,CAACX,GAAN,CAAUb,CAAV,CAA7B;UACA,IAAM4B,IAAI,GAAGF,YAAY,IAAIF,KAAK,CAACX,GAAN,CAAUZ,CAAV,CAA7B;;UAEA,IAAI0B,IAAI,IAAIC,IAAZ,EAAkB;YAChB,OAAOD,IAAI,IAAIC,IAAf;UACD;;UAED,IAAIH,YAAJ,EAAkB;YAChBD,KAAK,CAACb,GAAN,CAAUX,CAAV;UACD;;UAED,IAAI0B,YAAJ,EAAkB;YAChBF,KAAK,CAACb,GAAN,CAAUV,CAAV;UACD;QACF;;QAED,OAAOqB,WAAW,CAACtB,CAAD,EAAIC,CAAJ,EAAOuB,KAAP,CAAlB;MACD,CA1BD;IA2BD,CA9BD;EA+BD;EAED;;;;;;;;;;;WASgBK,eACd7B,GACAC,GACAkB,SACAW,MAAS;IAET,IAAIC,KAAK,GAAG/B,CAAC,CAACgC,MAAd;;IAEA,IAAI/B,CAAC,CAAC+B,MAAF,KAAaD,KAAjB,EAAwB;MACtB,OAAO,KAAP;IACD;;IAED,OAAOA,KAAK,KAAK,CAAjB,EAAoB;MAClB,IAAI,CAACZ,OAAO,CAACnB,CAAC,CAAC+B,KAAD,CAAF,EAAW9B,CAAC,CAAC8B,KAAD,CAAZ,EAAqBD,IAArB,CAAZ,EAAwC;QACtC,OAAO,KAAP;MACD;IACF;;IAED,OAAO,IAAP;EACD;EAED;;;;;;;;;;;WASgBG,aACdjC,GACAC,GACAkB,SACAW,MAAS;IAET,IAAII,YAAY,GAAGlC,CAAC,CAACmC,IAAF,KAAWlC,CAAC,CAACkC,IAAhC;;IAEA,IAAID,YAAY,IAAIlC,CAAC,CAACmC,IAAtB,EAA4B;MAC1B,IAAMC,gBAAc,GAAyB,EAA7C;MAEApC,CAAC,CAACqC,OAAF,CAAU,UAACC,MAAD,EAASC,IAAT,EAAa;QACrB,IAAIL,YAAJ,EAAkB;UAChB,IAAIM,UAAQ,GAAG,KAAf;UACA,IAAIC,YAAU,GAAG,CAAjB;UAEAxC,CAAC,CAACoC,OAAF,CAAU,UAACK,MAAD,EAASC,IAAT,EAAa;YACrB,IAAI,CAACH,UAAD,IAAa,CAACJ,gBAAc,CAACK,YAAD,CAAhC,EAA8C;cAC5CD,UAAQ,GACNrB,OAAO,CAACoB,IAAD,EAAOI,IAAP,EAAab,IAAb,CAAP,IAA6BX,OAAO,CAACmB,MAAD,EAASI,MAAT,EAAiBZ,IAAjB,CADtC;;cAGA,IAAIU,UAAJ,EAAc;gBACZJ,gBAAc,CAACK,YAAD,CAAd,GAA6B,IAA7B;cACD;YACF;;YAEDA,YAAU;UACX,CAXD;UAaAP,YAAY,GAAGM,UAAf;QACD;MACF,CApBD;IAqBD;;IAED,OAAON,YAAP;EACD;;EAOD,IAAMU,KAAK,GAAG,QAAd;EAEA,IAAMC,cAAc,GAAGC,QAAQ,CAACC,SAAT,CAAmBC,IAAnB,CAAwBC,IAAxB,CACrBH,QAAQ,CAACC,SAAT,CAAmBE,IADE,EAErBnD,MAAM,CAACiD,SAAP,CAAiBF,cAFI,CAAvB;EAKA;;;;;;;;;;WASgBK,gBACdlD,GACAC,GACAkB,SACAW,MAAS;IAET,IAAMqB,KAAK,GAAGC,IAAI,CAACpD,CAAD,CAAlB;IAEA,IAAI+B,KAAK,GAAGoB,KAAK,CAACnB,MAAlB;;IAEA,IAAIoB,IAAI,CAACnD,CAAD,CAAJ,CAAQ+B,MAAR,KAAmBD,KAAvB,EAA8B;MAC5B,OAAO,KAAP;IACD;;IAED,IAAIA,KAAJ,EAAW;MACT,IAAIsB,GAAG,SAAP;;MAEA,OAAOtB,KAAK,KAAK,CAAjB,EAAoB;QAClBsB,GAAG,GAAGF,KAAK,CAACpB,KAAD,CAAX;;QAEA,IAAIsB,GAAG,KAAKT,KAAZ,EAAmB;UACjB,IAAMU,aAAa,GAAG/C,cAAc,CAACP,CAAD,CAApC;UACA,IAAMuD,aAAa,GAAGhD,cAAc,CAACN,CAAD,CAApC;;UAEA,IACE,CAACqD,aAAa,IAAIC,aAAlB,KACAD,aAAa,KAAKC,aAFpB,EAGE;YACA,OAAO,KAAP;UACD;QACF;;QAED,IAAI,CAACV,cAAc,CAAC5C,CAAD,EAAIoD,GAAJ,CAAf,IAA2B,CAAClC,OAAO,CAACnB,CAAC,CAACqD,GAAD,CAAF,EAASpD,CAAC,CAACoD,GAAD,CAAV,EAAiBvB,IAAjB,CAAvC,EAA+D;UAC7D,OAAO,KAAP;QACD;MACF;IACF;;IAED,OAAO,IAAP;EACD;EAED;;;;;;;;;WAOgB0B,gBAAgBxD,GAAWC,GAAS;IAClD,OACED,CAAC,CAACyD,MAAF,KAAaxD,CAAC,CAACwD,MAAf,IACAzD,CAAC,CAAC0D,MAAF,KAAazD,CAAC,CAACyD,MADf,IAEA1D,CAAC,CAAC2D,UAAF,KAAiB1D,CAAC,CAAC0D,UAFnB,IAGA3D,CAAC,CAAC4D,SAAF,KAAgB3D,CAAC,CAAC2D,SAHlB,IAIA5D,CAAC,CAAC6D,OAAF,KAAc5D,CAAC,CAAC4D,OAJhB,IAKA7D,CAAC,CAAC8D,MAAF,KAAa7D,CAAC,CAAC6D,MALf,IAMA9D,CAAC,CAAC+D,SAAF,KAAgB9D,CAAC,CAAC8D,SAPpB;EASD;EAED;;;;;;;;;;;WASgBC,aACdhE,GACAC,GACAkB,SACAW,MAAS;IAET,IAAII,YAAY,GAAGlC,CAAC,CAACmC,IAAF,KAAWlC,CAAC,CAACkC,IAAhC;;IAEA,IAAID,YAAY,IAAIlC,CAAC,CAACmC,IAAtB,EAA4B;MAC1B,IAAM8B,gBAAc,GAAyB,EAA7C;MAEAjE,CAAC,CAACqC,OAAF,CAAU,UAACC,MAAD,EAAO;QACf,IAAIJ,YAAJ,EAAkB;UAChB,IAAIgC,UAAQ,GAAG,KAAf;UACA,IAAIC,YAAU,GAAG,CAAjB;UAEAlE,CAAC,CAACoC,OAAF,CAAU,UAACK,MAAD,EAAO;YACf,IAAI,CAACwB,UAAD,IAAa,CAACD,gBAAc,CAACE,YAAD,CAAhC,EAA8C;cAC5CD,UAAQ,GAAG/C,OAAO,CAACmB,MAAD,EAASI,MAAT,EAAiBZ,IAAjB,CAAlB;;cAEA,IAAIoC,UAAJ,EAAc;gBACZD,gBAAc,CAACE,YAAD,CAAd,GAA6B,IAA7B;cACD;YACF;;YAEDA,YAAU;UACX,CAVD;UAYAjC,YAAY,GAAGgC,UAAf;QACD;MACF,CAnBD;IAoBD;;IAED,OAAOhC,YAAP;EACF;;EC3TA,IAAMkC,eAAe,GAAG,OAAOC,GAAP,KAAe,UAAvC;EACA,IAAMC,eAAe,GAAG,OAAOC,GAAP,KAAe,UAAvC;;WAIgBC,iBAAiBC,eAAyC;IACxE,IAAMtD,OAAO;;IAEX,OAAOsD,aAAP,KAAyB,UAAzB,GACIA,aAAa,CAACpD,UAAD,CADjB,GAEIA,UAJN;;;;;;;;;;;;IAeA,SAASA,UAAT,CAAoBrB,CAApB,EAA4BC,CAA5B,EAAoC6B,IAApC,EAA8C;MAC5C,IAAI9B,CAAC,KAAKC,CAAV,EAAa;QACX,OAAO,IAAP;MACD;;MAED,IAAID,CAAC,IAAIC,CAAL,IAAU,OAAOD,CAAP,KAAa,QAAvB,IAAmC,OAAOC,CAAP,KAAa,QAApD,EAA8D;QAC5D,IAAIC,aAAa,CAACF,CAAD,CAAb,IAAoBE,aAAa,CAACD,CAAD,CAArC,EAA0C;UACxC,OAAOiD,eAAe,CAAClD,CAAD,EAAIC,CAAJ,EAAOkB,OAAP,EAAgBW,IAAhB,CAAtB;QACD;;QAED,IAAI4C,MAAM,GAAGC,KAAK,CAACC,OAAN,CAAc5E,CAAd,CAAb;QACA,IAAI6E,MAAM,GAAGF,KAAK,CAACC,OAAN,CAAc3E,CAAd,CAAb;;QAEA,IAAIyE,MAAM,IAAIG,MAAd,EAAsB;UACpB,OAAOH,MAAM,KAAKG,MAAX,IAAqBhD,cAAc,CAAC7B,CAAD,EAAIC,CAAJ,EAAOkB,OAAP,EAAgBW,IAAhB,CAA1C;QACD;;QAED4C,MAAM,GAAG1E,CAAC,YAAY8E,IAAtB;QACAD,MAAM,GAAG5E,CAAC,YAAY6E,IAAtB;;QAEA,IAAIJ,MAAM,IAAIG,MAAd,EAAsB;UACpB,OACEH,MAAM,KAAKG,MAAX,IAAqB9E,kBAAkB,CAACC,CAAC,CAAC+E,OAAF,EAAD,EAAc9E,CAAC,CAAC8E,OAAF,EAAd,CADzC;QAGD;;QAEDL,MAAM,GAAG1E,CAAC,YAAYgF,MAAtB;QACAH,MAAM,GAAG5E,CAAC,YAAY+E,MAAtB;;QAEA,IAAIN,MAAM,IAAIG,MAAd,EAAsB;UACpB,OAAOH,MAAM,KAAKG,MAAX,IAAqBrB,eAAe,CAACxD,CAAD,EAAIC,CAAJ,CAA3C;QACD;;QAED,IAAII,aAAa,CAACL,CAAD,CAAb,IAAoBK,aAAa,CAACJ,CAAD,CAArC,EAA0C;UACxC,OAAOD,CAAC,KAAKC,CAAb;QACD;;QAED,IAAImE,eAAJ,EAAqB;UACnBM,MAAM,GAAG1E,CAAC,YAAYqE,GAAtB;UACAQ,MAAM,GAAG5E,CAAC,YAAYoE,GAAtB;;UAEA,IAAIK,MAAM,IAAIG,MAAd,EAAsB;YACpB,OAAOH,MAAM,KAAKG,MAAX,IAAqB5C,YAAY,CAACjC,CAAD,EAAIC,CAAJ,EAAOkB,OAAP,EAAgBW,IAAhB,CAAxC;UACD;QACF;;QAED,IAAIwC,eAAJ,EAAqB;UACnBI,MAAM,GAAG1E,CAAC,YAAYuE,GAAtB;UACAM,MAAM,GAAG5E,CAAC,YAAYsE,GAAtB;;UAEA,IAAIG,MAAM,IAAIG,MAAd,EAAsB;YACpB,OAAOH,MAAM,KAAKG,MAAX,IAAqBb,YAAY,CAAChE,CAAD,EAAIC,CAAJ,EAAOkB,OAAP,EAAgBW,IAAhB,CAAxC;UACD;QACF;;QAED,OAAOoB,eAAe,CAAClD,CAAD,EAAIC,CAAJ,EAAOkB,OAAP,EAAgBW,IAAhB,CAAtB;MACD;;MAED,OAAO9B,CAAC,KAAKA,CAAN,IAAWC,CAAC,KAAKA,CAAxB;IACD;;IAED,OAAOoB,UAAP;EACF;;MC1Fa4D,SAAS,GAAGT,gBAAgB;MAC5BU,YAAY,GAAGV,gBAAgB,CAAC;IAAM;EAAkB,CAAzB;MAE/BW,iBAAiB,GAAGX,gBAAgB,CAACtD,0BAA0B,EAA3B;MACpCkE,oBAAoB,GAAGZ,gBAAgB,CAClDtD,0BAA0B,CAACnB,kBAAD,CADwB","names":["HAS_WEAKSET_SUPPORT","WeakSet","Object","sameValueZeroEqual","a","b","isPlainObject","value","constructor","isPromiseLike","then","isReactElement","$$typeof","getNewCacheFallback","values","add","push","has","indexOf","getNewCache","canUseWeakMap","_getNewCache","createCircularEqualCreator","isEqual","createCircularEqual","comparator","_comparator","circularEqual","cache","isCacheableA","isCacheableB","hasA","hasB","areArraysEqual","meta","index","length","areMapsEqual","isValueEqual","size","matchedIndices_1","forEach","aValue","aKey","hasMatch_1","matchIndex_1","bValue","bKey","OWNER","hasOwnProperty","Function","prototype","bind","call","areObjectsEqual","keysA","keys","key","reactElementA","reactElementB","areRegExpsEqual","source","global","ignoreCase","multiline","unicode","sticky","lastIndex","areSetsEqual","matchedIndices_2","hasMatch_2","matchIndex_2","HAS_MAP_SUPPORT","Map","HAS_SET_SUPPORT","Set","createComparator","createIsEqual","aShape","Array","isArray","bShape","Date","getTime","RegExp","deepEqual","shallowEqual","circularDeepEqual","circularShallowEqual"],"sources":["/home/foglet15/Code/Python/rcwa/rcwa_www/frontend_rcwa/node_modules/fast-equals/src/utils.ts","/home/foglet15/Code/Python/rcwa/rcwa_www/frontend_rcwa/node_modules/fast-equals/src/comparator.ts","/home/foglet15/Code/Python/rcwa/rcwa_www/frontend_rcwa/node_modules/fast-equals/src/index.ts"],"sourcesContent":["const HAS_WEAKSET_SUPPORT = typeof WeakSet === 'function';\n\nconst { keys } = Object;\n\ntype Cache = {\n  add: (value: any) => void;\n  has: (value: any) => boolean;\n};\n\nexport type EqualityComparator = (a: any, b: any, meta?: any) => boolean;\n\n/**\n * are the values passed strictly equal or both NaN\n *\n * @param a the value to compare against\n * @param b the value to test\n * @returns are the values equal by the SameValueZero principle\n */\nexport function sameValueZeroEqual(a: any, b: any) {\n  return a === b || (a !== a && b !== b);\n}\n\n/**\n * is the value a plain object\n *\n * @param value the value to test\n * @returns is the value a plain object\n */\nexport function isPlainObject(value: any) {\n  return value.constructor === Object || value.constructor == null;\n}\n\n/**\n * is the value promise-like (meaning it is thenable)\n *\n * @param value the value to test\n * @returns is the value promise-like\n */\nexport function isPromiseLike(value: any) {\n  return !!value && typeof value.then === 'function';\n}\n\n/**\n * is the value passed a react element\n *\n * @param value the value to test\n * @returns is the value a react element\n */\nexport function isReactElement(value: any) {\n  return !!(value && value.$$typeof);\n}\n\n/**\n * in cases where WeakSet is not supported, creates a new custom\n * object that mimics the necessary API aspects for cache purposes\n *\n * @returns the new cache object\n */\nexport function getNewCacheFallback(): Cache {\n  const values: any[] = [];\n\n  return {\n    add(value: any) {\n      values.push(value);\n    },\n\n    has(value: any) {\n      return values.indexOf(value) !== -1;\n    },\n  };\n}\n\n/**\n * get a new cache object to prevent circular references\n *\n * @returns the new cache object\n */\nexport const getNewCache = ((canUseWeakMap: boolean) => {\n  if (canUseWeakMap) {\n    return function _getNewCache(): Cache {\n      return new WeakSet();\n    };\n  }\n\n  return getNewCacheFallback;\n})(HAS_WEAKSET_SUPPORT);\n\n/**\n * create a custom isEqual handler specific to circular objects\n *\n * @param [isEqual] the isEqual comparator to use instead of isDeepEqual\n * @returns the method to create the `isEqual` function\n */\nexport function createCircularEqualCreator(isEqual?: EqualityComparator) {\n  return function createCircularEqual(comparator: EqualityComparator) {\n    const _comparator = isEqual || comparator;\n\n    return function circularEqual(\n      a: any,\n      b: any,\n      cache: Cache = getNewCache(),\n    ) {\n      const isCacheableA = !!a && typeof a === 'object';\n      const isCacheableB = !!b && typeof b === 'object';\n\n      if (isCacheableA || isCacheableB) {\n        const hasA = isCacheableA && cache.has(a);\n        const hasB = isCacheableB && cache.has(b);\n\n        if (hasA || hasB) {\n          return hasA && hasB;\n        }\n\n        if (isCacheableA) {\n          cache.add(a);\n        }\n\n        if (isCacheableB) {\n          cache.add(b);\n        }\n      }\n\n      return _comparator(a, b, cache);\n    };\n  };\n}\n\n/**\n * are the arrays equal in value\n *\n * @param a the array to test\n * @param b the array to test against\n * @param isEqual the comparator to determine equality\n * @param meta the meta object to pass through\n * @returns are the arrays equal\n */\nexport function areArraysEqual(\n  a: any[],\n  b: any[],\n  isEqual: EqualityComparator,\n  meta: any,\n) {\n  let index = a.length;\n\n  if (b.length !== index) {\n    return false;\n  }\n\n  while (index-- > 0) {\n    if (!isEqual(a[index], b[index], meta)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * are the maps equal in value\n *\n * @param a the map to test\n * @param b the map to test against\n * @param isEqual the comparator to determine equality\n * @param meta the meta map to pass through\n * @returns are the maps equal\n */\nexport function areMapsEqual(\n  a: Map<any, any>,\n  b: Map<any, any>,\n  isEqual: EqualityComparator,\n  meta: any,\n) {\n  let isValueEqual = a.size === b.size;\n\n  if (isValueEqual && a.size) {\n    const matchedIndices: Record<number, true> = {};\n\n    a.forEach((aValue, aKey) => {\n      if (isValueEqual) {\n        let hasMatch = false;\n        let matchIndex = 0;\n\n        b.forEach((bValue, bKey) => {\n          if (!hasMatch && !matchedIndices[matchIndex]) {\n            hasMatch =\n              isEqual(aKey, bKey, meta) && isEqual(aValue, bValue, meta);\n\n            if (hasMatch) {\n              matchedIndices[matchIndex] = true;\n            }\n          }\n\n          matchIndex++;\n        });\n\n        isValueEqual = hasMatch;\n      }\n    });\n  }\n\n  return isValueEqual;\n}\n\ntype Dictionary<Type> = {\n  [key: string]: Type;\n  [index: number]: Type;\n};\n\nconst OWNER = '_owner';\n\nconst hasOwnProperty = Function.prototype.bind.call(\n  Function.prototype.call,\n  Object.prototype.hasOwnProperty,\n);\n\n/**\n * are the objects equal in value\n *\n * @param a the object to test\n * @param b the object to test against\n * @param isEqual the comparator to determine equality\n * @param meta the meta object to pass through\n * @returns are the objects equal\n */\nexport function areObjectsEqual(\n  a: Dictionary<any>,\n  b: Dictionary<any>,\n  isEqual: EqualityComparator,\n  meta: any,\n) {\n  const keysA = keys(a);\n\n  let index = keysA.length;\n\n  if (keys(b).length !== index) {\n    return false;\n  }\n\n  if (index) {\n    let key: string;\n\n    while (index-- > 0) {\n      key = keysA[index];\n\n      if (key === OWNER) {\n        const reactElementA = isReactElement(a);\n        const reactElementB = isReactElement(b);\n\n        if (\n          (reactElementA || reactElementB) &&\n          reactElementA !== reactElementB\n        ) {\n          return false;\n        }\n      }\n\n      if (!hasOwnProperty(b, key) || !isEqual(a[key], b[key], meta)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * are the regExps equal in value\n *\n * @param a the regExp to test\n * @param b the regExp to test agains\n * @returns are the regExps equal\n */\nexport function areRegExpsEqual(a: RegExp, b: RegExp) {\n  return (\n    a.source === b.source &&\n    a.global === b.global &&\n    a.ignoreCase === b.ignoreCase &&\n    a.multiline === b.multiline &&\n    a.unicode === b.unicode &&\n    a.sticky === b.sticky &&\n    a.lastIndex === b.lastIndex\n  );\n}\n\n/**\n * are the sets equal in value\n *\n * @param a the set to test\n * @param b the set to test against\n * @param isEqual the comparator to determine equality\n * @param meta the meta set to pass through\n * @returns are the sets equal\n */\nexport function areSetsEqual(\n  a: Set<any>,\n  b: Set<any>,\n  isEqual: EqualityComparator,\n  meta: any,\n) {\n  let isValueEqual = a.size === b.size;\n\n  if (isValueEqual && a.size) {\n    const matchedIndices: Record<number, true> = {};\n\n    a.forEach((aValue) => {\n      if (isValueEqual) {\n        let hasMatch = false;\n        let matchIndex = 0;\n\n        b.forEach((bValue) => {\n          if (!hasMatch && !matchedIndices[matchIndex]) {\n            hasMatch = isEqual(aValue, bValue, meta);\n\n            if (hasMatch) {\n              matchedIndices[matchIndex] = true;\n            }\n          }\n\n          matchIndex++;\n        });\n\n        isValueEqual = hasMatch;\n      }\n    });\n  }\n\n  return isValueEqual;\n}\n","import {\n  EqualityComparator,\n  areArraysEqual,\n  areMapsEqual,\n  areObjectsEqual,\n  areRegExpsEqual,\n  areSetsEqual,\n  isPlainObject,\n  isPromiseLike,\n  sameValueZeroEqual,\n} from './utils';\n\nconst HAS_MAP_SUPPORT = typeof Map === 'function';\nconst HAS_SET_SUPPORT = typeof Set === 'function';\n\ntype EqualityComparatorCreator = (fn: EqualityComparator) => EqualityComparator;\n\nexport function createComparator(createIsEqual?: EqualityComparatorCreator) {\n  const isEqual: EqualityComparator =\n    /* eslint-disable no-use-before-define */\n    typeof createIsEqual === 'function'\n      ? createIsEqual(comparator)\n      : comparator;\n  /* eslint-enable */\n\n  /**\n   * compare the value of the two objects and return true if they are equivalent in values\n   *\n   * @param a the value to test against\n   * @param b the value to test\n   * @param [meta] an optional meta object that is passed through to all equality test calls\n   * @returns are a and b equivalent in value\n   */\n  function comparator(a: any, b: any, meta?: any) {\n    if (a === b) {\n      return true;\n    }\n\n    if (a && b && typeof a === 'object' && typeof b === 'object') {\n      if (isPlainObject(a) && isPlainObject(b)) {\n        return areObjectsEqual(a, b, isEqual, meta);\n      }\n\n      let aShape = Array.isArray(a);\n      let bShape = Array.isArray(b);\n\n      if (aShape || bShape) {\n        return aShape === bShape && areArraysEqual(a, b, isEqual, meta);\n      }\n\n      aShape = a instanceof Date;\n      bShape = b instanceof Date;\n\n      if (aShape || bShape) {\n        return (\n          aShape === bShape && sameValueZeroEqual(a.getTime(), b.getTime())\n        );\n      }\n\n      aShape = a instanceof RegExp;\n      bShape = b instanceof RegExp;\n\n      if (aShape || bShape) {\n        return aShape === bShape && areRegExpsEqual(a, b);\n      }\n\n      if (isPromiseLike(a) || isPromiseLike(b)) {\n        return a === b;\n      }\n\n      if (HAS_MAP_SUPPORT) {\n        aShape = a instanceof Map;\n        bShape = b instanceof Map;\n\n        if (aShape || bShape) {\n          return aShape === bShape && areMapsEqual(a, b, isEqual, meta);\n        }\n      }\n\n      if (HAS_SET_SUPPORT) {\n        aShape = a instanceof Set;\n        bShape = b instanceof Set;\n\n        if (aShape || bShape) {\n          return aShape === bShape && areSetsEqual(a, b, isEqual, meta);\n        }\n      }\n\n      return areObjectsEqual(a, b, isEqual, meta);\n    }\n\n    return a !== a && b !== b;\n  }\n\n  return comparator;\n}\n","import { createComparator } from './comparator';\nimport { createCircularEqualCreator, sameValueZeroEqual } from './utils';\n\nexport { createComparator as createCustomEqual, sameValueZeroEqual };\n\nexport const deepEqual = createComparator();\nexport const shallowEqual = createComparator(() => sameValueZeroEqual);\n\nexport const circularDeepEqual = createComparator(createCircularEqualCreator());\nexport const circularShallowEqual = createComparator(\n  createCircularEqualCreator(sameValueZeroEqual),\n);\n"]},"metadata":{},"sourceType":"script"}