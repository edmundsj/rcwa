{"ast":null,"code":"import { slice } from \"./array.js\";\nimport bisect from \"./bisect.js\";\nimport constant from \"./constant.js\";\nimport extent from \"./extent.js\";\nimport identity from \"./identity.js\";\nimport nice from \"./nice.js\";\nimport ticks, { tickIncrement } from \"./ticks.js\";\nimport sturges from \"./threshold/sturges.js\";\nexport default function bin() {\n  var value = identity,\n      domain = extent,\n      threshold = sturges;\n\n  function histogram(data) {\n    if (!Array.isArray(data)) data = Array.from(data);\n    var i,\n        n = data.length,\n        x,\n        step,\n        values = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n\n    var xz = domain(values),\n        x0 = xz[0],\n        x1 = xz[1],\n        tz = threshold(values, x0, x1); // Convert number of thresholds into uniform thresholds, and nice the\n    // default domain accordingly.\n\n    if (!Array.isArray(tz)) {\n      const max = x1,\n            tn = +tz;\n      if (domain === extent) [x0, x1] = nice(x0, x1, tn);\n      tz = ticks(x0, x1, tn); // If the domain is aligned with the first tick (which it will by\n      // default), then we can use quantization rather than bisection to bin\n      // values, which is substantially faster.\n\n      if (tz[0] <= x0) step = tickIncrement(x0, x1, tn); // If the last threshold is coincident with the domain’s upper bound, the\n      // last bin will be zero-width. If the default domain is used, and this\n      // last threshold is coincident with the maximum input value, we can\n      // extend the niced upper bound by one tick to ensure uniform bin widths;\n      // otherwise, we simply remove the last threshold. Note that we don’t\n      // coerce values or the domain to numbers, and thus must be careful to\n      // compare order (>=) rather than strict equality (===)!\n\n      if (tz[tz.length - 1] >= x1) {\n        if (max >= x1 && domain === extent) {\n          const step = tickIncrement(x0, x1, tn);\n\n          if (isFinite(step)) {\n            if (step > 0) {\n              x1 = (Math.floor(x1 / step) + 1) * step;\n            } else if (step < 0) {\n              x1 = (Math.ceil(x1 * -step) + 1) / -step;\n            }\n          }\n        } else {\n          tz.pop();\n        }\n      }\n    } // Remove any thresholds outside the domain.\n\n\n    var m = tz.length;\n\n    while (tz[0] <= x0) tz.shift(), --m;\n\n    while (tz[m - 1] > x1) tz.pop(), --m;\n\n    var bins = new Array(m + 1),\n        bin; // Initialize bins.\n\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    } // Assign data to bins by value, ignoring any outside the domain.\n\n\n    if (isFinite(step)) {\n      if (step > 0) {\n        for (i = 0; i < n; ++i) {\n          if ((x = values[i]) != null && x0 <= x && x <= x1) {\n            bins[Math.min(m, Math.floor((x - x0) / step))].push(data[i]);\n          }\n        }\n      } else if (step < 0) {\n        for (i = 0; i < n; ++i) {\n          if ((x = values[i]) != null && x0 <= x && x <= x1) {\n            const j = Math.floor((x0 - x) * step);\n            bins[Math.min(m, j + (tz[j] <= x))].push(data[i]); // handle off-by-one due to rounding\n          }\n        }\n      }\n    } else {\n      for (i = 0; i < n; ++i) {\n        if ((x = values[i]) != null && x0 <= x && x <= x1) {\n          bins[bisect(tz, x, 0, m)].push(data[i]);\n        }\n      }\n    }\n\n    return bins;\n  }\n\n  histogram.value = function (_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n\n  histogram.domain = function (_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n\n  histogram.thresholds = function (_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n  };\n\n  return histogram;\n}","map":{"version":3,"names":["slice","bisect","constant","extent","identity","nice","ticks","tickIncrement","sturges","bin","value","domain","threshold","histogram","data","Array","isArray","from","i","n","length","x","step","values","xz","x0","x1","tz","max","tn","isFinite","Math","floor","ceil","pop","m","shift","bins","min","push","j","_","arguments","thresholds","call"],"sources":["/home/foglet15/Code/Python/rcwa/rcwa_www/frontend_rcwa/node_modules/d3-array/src/bin.js"],"sourcesContent":["import {slice} from \"./array.js\";\nimport bisect from \"./bisect.js\";\nimport constant from \"./constant.js\";\nimport extent from \"./extent.js\";\nimport identity from \"./identity.js\";\nimport nice from \"./nice.js\";\nimport ticks, {tickIncrement} from \"./ticks.js\";\nimport sturges from \"./threshold/sturges.js\";\n\nexport default function bin() {\n  var value = identity,\n      domain = extent,\n      threshold = sturges;\n\n  function histogram(data) {\n    if (!Array.isArray(data)) data = Array.from(data);\n\n    var i,\n        n = data.length,\n        x,\n        step,\n        values = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n\n    var xz = domain(values),\n        x0 = xz[0],\n        x1 = xz[1],\n        tz = threshold(values, x0, x1);\n\n    // Convert number of thresholds into uniform thresholds, and nice the\n    // default domain accordingly.\n    if (!Array.isArray(tz)) {\n      const max = x1, tn = +tz;\n      if (domain === extent) [x0, x1] = nice(x0, x1, tn);\n      tz = ticks(x0, x1, tn);\n\n      // If the domain is aligned with the first tick (which it will by\n      // default), then we can use quantization rather than bisection to bin\n      // values, which is substantially faster.\n      if (tz[0] <= x0) step = tickIncrement(x0, x1, tn);\n\n      // If the last threshold is coincident with the domain’s upper bound, the\n      // last bin will be zero-width. If the default domain is used, and this\n      // last threshold is coincident with the maximum input value, we can\n      // extend the niced upper bound by one tick to ensure uniform bin widths;\n      // otherwise, we simply remove the last threshold. Note that we don’t\n      // coerce values or the domain to numbers, and thus must be careful to\n      // compare order (>=) rather than strict equality (===)!\n      if (tz[tz.length - 1] >= x1) {\n        if (max >= x1 && domain === extent) {\n          const step = tickIncrement(x0, x1, tn);\n          if (isFinite(step)) {\n            if (step > 0) {\n              x1 = (Math.floor(x1 / step) + 1) * step;\n            } else if (step < 0) {\n              x1 = (Math.ceil(x1 * -step) + 1) / -step;\n            }\n          }\n        } else {\n          tz.pop();\n        }\n      }\n    }\n\n    // Remove any thresholds outside the domain.\n    var m = tz.length;\n    while (tz[0] <= x0) tz.shift(), --m;\n    while (tz[m - 1] > x1) tz.pop(), --m;\n\n    var bins = new Array(m + 1),\n        bin;\n\n    // Initialize bins.\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    }\n\n    // Assign data to bins by value, ignoring any outside the domain.\n    if (isFinite(step)) {\n      if (step > 0) {\n        for (i = 0; i < n; ++i) {\n          if ((x = values[i]) != null && x0 <= x && x <= x1) {\n            bins[Math.min(m, Math.floor((x - x0) / step))].push(data[i]);\n          }\n        }\n      } else if (step < 0) {\n        for (i = 0; i < n; ++i) {\n          if ((x = values[i]) != null && x0 <= x && x <= x1) {\n            const j = Math.floor((x0 - x) * step);\n            bins[Math.min(m, j + (tz[j] <= x))].push(data[i]); // handle off-by-one due to rounding\n          }\n        }\n      }\n    } else {\n      for (i = 0; i < n; ++i) {\n        if ((x = values[i]) != null && x0 <= x && x <= x1) {\n          bins[bisect(tz, x, 0, m)].push(data[i]);\n        }\n      }\n    }\n\n    return bins;\n  }\n\n  histogram.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n\n  histogram.domain = function(_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n\n  histogram.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n  };\n\n  return histogram;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}