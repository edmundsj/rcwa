{"ast":null,"code":"import ascending from \"./ascending.js\";\nimport descending from \"./descending.js\";\nexport default function bisector(f) {\n  let compare1, compare2, delta; // If an accessor is specified, promote it to a comparator. In this case we\n  // can test whether the search value is (self-) comparable. We can’t do this\n  // for a comparator (except for specific, known comparators) because we can’t\n  // tell if the comparator is symmetric, and an asymmetric comparator can’t be\n  // used to test whether a single value is comparable.\n\n  if (f.length !== 2) {\n    compare1 = ascending;\n\n    compare2 = (d, x) => ascending(f(d), x);\n\n    delta = (d, x) => f(d) - x;\n  } else {\n    compare1 = f === ascending || f === descending ? f : zero;\n    compare2 = f;\n    delta = f;\n  }\n\n  function left(a, x) {\n    let lo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let hi = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : a.length;\n\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n\n      do {\n        const mid = lo + hi >>> 1;\n        if (compare2(a[mid], x) < 0) lo = mid + 1;else hi = mid;\n      } while (lo < hi);\n    }\n\n    return lo;\n  }\n\n  function right(a, x) {\n    let lo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let hi = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : a.length;\n\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n\n      do {\n        const mid = lo + hi >>> 1;\n        if (compare2(a[mid], x) <= 0) lo = mid + 1;else hi = mid;\n      } while (lo < hi);\n    }\n\n    return lo;\n  }\n\n  function center(a, x) {\n    let lo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let hi = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : a.length;\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n\n  return {\n    left,\n    center,\n    right\n  };\n}\n\nfunction zero() {\n  return 0;\n}","map":{"version":3,"names":["ascending","descending","bisector","f","compare1","compare2","delta","length","d","x","zero","left","a","lo","hi","mid","right","center","i"],"sources":["/home/foglet15/Code/Python/rcwa/rcwa_www/frontend_rcwa/node_modules/d3-array/src/bisector.js"],"sourcesContent":["import ascending from \"./ascending.js\";\nimport descending from \"./descending.js\";\n\nexport default function bisector(f) {\n  let compare1, compare2, delta;\n\n  // If an accessor is specified, promote it to a comparator. In this case we\n  // can test whether the search value is (self-) comparable. We can’t do this\n  // for a comparator (except for specific, known comparators) because we can’t\n  // tell if the comparator is symmetric, and an asymmetric comparator can’t be\n  // used to test whether a single value is comparable.\n  if (f.length !== 2) {\n    compare1 = ascending;\n    compare2 = (d, x) => ascending(f(d), x);\n    delta = (d, x) => f(d) - x;\n  } else {\n    compare1 = f === ascending || f === descending ? f : zero;\n    compare2 = f;\n    delta = f;\n  }\n\n  function left(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function right(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) <= 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function center(a, x, lo = 0, hi = a.length) {\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n\n  return {left, center, right};\n}\n\nfunction zero() {\n  return 0;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}