{"ast":null,"code":"import exponent from \"./exponent.js\";\nimport formatGroup from \"./formatGroup.js\";\nimport formatNumerals from \"./formatNumerals.js\";\nimport formatSpecifier from \"./formatSpecifier.js\";\nimport formatTrim from \"./formatTrim.js\";\nimport formatTypes from \"./formatTypes.js\";\nimport { prefixExponent } from \"./formatPrefixAuto.js\";\nimport identity from \"./identity.js\";\nvar map = Array.prototype.map,\n    prefixes = [\"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"];\nexport default function (locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"−\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type; // The \"n\" type is an alias for \",g\".\n\n    if (type === \"n\") comma = true, type = \"g\"; // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\"; // If zero fill is specified, padding goes after sign and before digits.\n\n    if (zero || fill === \"0\" && align === \"=\") zero = true, fill = \"0\", align = \"=\"; // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\"; // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n\n    precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i,\n          n,\n          c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value; // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n\n        var valueNegative = value < 0 || 1 / value < 0; // Perform the initial formatting.\n\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision); // Trim insignificant zeros.\n\n        if (trim) value = formatTrim(value); // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false; // Compute the prefix and suffix.\n\n        valuePrefix = (valueNegative ? sign === \"(\" ? sign : minus : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\"); // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      } // If the fill character is not \"0\", grouping is applied before padding.\n\n\n      if (comma && !zero) value = group(value, Infinity); // Compute the padding.\n\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\"; // If the fill character is \"0\", grouping is applied after padding.\n\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\"; // Reconstruct the final output based on the desired alignment.\n\n      switch (align) {\n        case \"<\":\n          value = valuePrefix + value + valueSuffix + padding;\n          break;\n\n        case \"=\":\n          value = valuePrefix + padding + value + valueSuffix;\n          break;\n\n        case \"^\":\n          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);\n          break;\n\n        default:\n          value = padding + valuePrefix + value + valueSuffix;\n          break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function () {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function (value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}","map":{"version":3,"names":["exponent","formatGroup","formatNumerals","formatSpecifier","formatTrim","formatTypes","prefixExponent","identity","map","Array","prototype","prefixes","locale","group","grouping","undefined","thousands","call","Number","currencyPrefix","currency","currencySuffix","decimal","numerals","String","percent","minus","nan","newFormat","specifier","fill","align","sign","symbol","zero","width","comma","precision","trim","type","prefix","test","toLowerCase","suffix","formatType","maybeSuffix","Math","max","min","format","value","valuePrefix","valueSuffix","i","n","c","valueNegative","isNaN","abs","length","charCodeAt","slice","Infinity","padding","join","toString","formatPrefix","f","e","floor","k","pow"],"sources":["/home/foglet15/Code/Python/rcwa/rcwa_www/frontend_rcwa/node_modules/d3-format/src/locale.js"],"sourcesContent":["import exponent from \"./exponent.js\";\nimport formatGroup from \"./formatGroup.js\";\nimport formatNumerals from \"./formatNumerals.js\";\nimport formatSpecifier from \"./formatSpecifier.js\";\nimport formatTrim from \"./formatTrim.js\";\nimport formatTypes from \"./formatTypes.js\";\nimport {prefixExponent} from \"./formatPrefixAuto.js\";\nimport identity from \"./identity.js\";\n\nvar map = Array.prototype.map,\n    prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"−\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision === undefined ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n        var valueNegative = value < 0 || 1 / value < 0;\n\n        // Perform the initial formatting.\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : minus) : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}