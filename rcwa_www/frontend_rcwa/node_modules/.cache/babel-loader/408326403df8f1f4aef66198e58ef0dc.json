{"ast":null,"code":"import number from \"./number.js\";\nvar reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n    reB = new RegExp(reA.source, \"g\");\n\nfunction zero(b) {\n  return function () {\n    return b;\n  };\n}\n\nfunction one(b) {\n  return function (t) {\n    return b(t) + \"\";\n  };\n}\n\nexport default function (a, b) {\n  var bi = reA.lastIndex = reB.lastIndex = 0,\n      // scan index for next number in b\n  am,\n      // current match in a\n  bm,\n      // current match in b\n  bs,\n      // string preceding current number in b, if any\n  i = -1,\n      // index in s\n  s = [],\n      // string constants and placeholders\n  q = []; // number interpolators\n  // Coerce inputs to strings.\n\n  a = a + \"\", b = b + \"\"; // Interpolate pairs of numbers in a & b.\n\n  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {\n    if ((bs = bm.index) > bi) {\n      // a string precedes the next number in b\n      bs = b.slice(bi, bs);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n\n    if ((am = am[0]) === (bm = bm[0])) {\n      // numbers in a & b match\n      if (s[i]) s[i] += bm; // coalesce with previous string\n      else s[++i] = bm;\n    } else {\n      // interpolate non-matching numbers\n      s[++i] = null;\n      q.push({\n        i: i,\n        x: number(am, bm)\n      });\n    }\n\n    bi = reB.lastIndex;\n  } // Add remains of b.\n\n\n  if (bi < b.length) {\n    bs = b.slice(bi);\n    if (s[i]) s[i] += bs; // coalesce with previous string\n    else s[++i] = bs;\n  } // Special optimization for only a single match.\n  // Otherwise, interpolate each of the numbers and rejoin the string.\n\n\n  return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {\n    for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n\n    return s.join(\"\");\n  });\n}","map":{"version":3,"names":["number","reA","reB","RegExp","source","zero","b","one","t","a","bi","lastIndex","am","bm","bs","i","s","q","exec","index","slice","push","x","length","o","join"],"sources":["/home/foglet15/Code/Python/rcwa/rcwa_www/frontend_rcwa/node_modules/d3-interpolate/src/string.js"],"sourcesContent":["import number from \"./number.js\";\n\nvar reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n    reB = new RegExp(reA.source, \"g\");\n\nfunction zero(b) {\n  return function() {\n    return b;\n  };\n}\n\nfunction one(b) {\n  return function(t) {\n    return b(t) + \"\";\n  };\n}\n\nexport default function(a, b) {\n  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\n      am, // current match in a\n      bm, // current match in b\n      bs, // string preceding current number in b, if any\n      i = -1, // index in s\n      s = [], // string constants and placeholders\n      q = []; // number interpolators\n\n  // Coerce inputs to strings.\n  a = a + \"\", b = b + \"\";\n\n  // Interpolate pairs of numbers in a & b.\n  while ((am = reA.exec(a))\n      && (bm = reB.exec(b))) {\n    if ((bs = bm.index) > bi) { // a string precedes the next number in b\n      bs = b.slice(bi, bs);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\n      if (s[i]) s[i] += bm; // coalesce with previous string\n      else s[++i] = bm;\n    } else { // interpolate non-matching numbers\n      s[++i] = null;\n      q.push({i: i, x: number(am, bm)});\n    }\n    bi = reB.lastIndex;\n  }\n\n  // Add remains of b.\n  if (bi < b.length) {\n    bs = b.slice(bi);\n    if (s[i]) s[i] += bs; // coalesce with previous string\n    else s[++i] = bs;\n  }\n\n  // Special optimization for only a single match.\n  // Otherwise, interpolate each of the numbers and rejoin the string.\n  return s.length < 2 ? (q[0]\n      ? one(q[0].x)\n      : zero(b))\n      : (b = q.length, function(t) {\n          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n          return s.join(\"\");\n        });\n}\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,aAAnB;AAEA,IAAIC,GAAG,GAAG,6CAAV;AAAA,IACIC,GAAG,GAAG,IAAIC,MAAJ,CAAWF,GAAG,CAACG,MAAf,EAAuB,GAAvB,CADV;;AAGA,SAASC,IAAT,CAAcC,CAAd,EAAiB;EACf,OAAO,YAAW;IAChB,OAAOA,CAAP;EACD,CAFD;AAGD;;AAED,SAASC,GAAT,CAAaD,CAAb,EAAgB;EACd,OAAO,UAASE,CAAT,EAAY;IACjB,OAAOF,CAAC,CAACE,CAAD,CAAD,GAAO,EAAd;EACD,CAFD;AAGD;;AAED,eAAe,UAASC,CAAT,EAAYH,CAAZ,EAAe;EAC5B,IAAII,EAAE,GAAGT,GAAG,CAACU,SAAJ,GAAgBT,GAAG,CAACS,SAAJ,GAAgB,CAAzC;EAAA,IAA4C;EACxCC,EADJ;EAAA,IACQ;EACJC,EAFJ;EAAA,IAEQ;EACJC,EAHJ;EAAA,IAGQ;EACJC,CAAC,GAAG,CAAC,CAJT;EAAA,IAIY;EACRC,CAAC,GAAG,EALR;EAAA,IAKY;EACRC,CAAC,GAAG,EANR,CAD4B,CAOhB;EAEZ;;EACAR,CAAC,GAAGA,CAAC,GAAG,EAAR,EAAYH,CAAC,GAAGA,CAAC,GAAG,EAApB,CAV4B,CAY5B;;EACA,OAAO,CAACM,EAAE,GAAGX,GAAG,CAACiB,IAAJ,CAAST,CAAT,CAAN,MACCI,EAAE,GAAGX,GAAG,CAACgB,IAAJ,CAASZ,CAAT,CADN,CAAP,EAC2B;IACzB,IAAI,CAACQ,EAAE,GAAGD,EAAE,CAACM,KAAT,IAAkBT,EAAtB,EAA0B;MAAE;MAC1BI,EAAE,GAAGR,CAAC,CAACc,KAAF,CAAQV,EAAR,EAAYI,EAAZ,CAAL;MACA,IAAIE,CAAC,CAACD,CAAD,CAAL,EAAUC,CAAC,CAACD,CAAD,CAAD,IAAQD,EAAR,CAAV,CAAsB;MAAtB,KACKE,CAAC,CAAC,EAAED,CAAH,CAAD,GAASD,EAAT;IACN;;IACD,IAAI,CAACF,EAAE,GAAGA,EAAE,CAAC,CAAD,CAAR,OAAkBC,EAAE,GAAGA,EAAE,CAAC,CAAD,CAAzB,CAAJ,EAAmC;MAAE;MACnC,IAAIG,CAAC,CAACD,CAAD,CAAL,EAAUC,CAAC,CAACD,CAAD,CAAD,IAAQF,EAAR,CAAV,CAAsB;MAAtB,KACKG,CAAC,CAAC,EAAED,CAAH,CAAD,GAASF,EAAT;IACN,CAHD,MAGO;MAAE;MACPG,CAAC,CAAC,EAAED,CAAH,CAAD,GAAS,IAAT;MACAE,CAAC,CAACI,IAAF,CAAO;QAACN,CAAC,EAAEA,CAAJ;QAAOO,CAAC,EAAEtB,MAAM,CAACY,EAAD,EAAKC,EAAL;MAAhB,CAAP;IACD;;IACDH,EAAE,GAAGR,GAAG,CAACS,SAAT;EACD,CA5B2B,CA8B5B;;;EACA,IAAID,EAAE,GAAGJ,CAAC,CAACiB,MAAX,EAAmB;IACjBT,EAAE,GAAGR,CAAC,CAACc,KAAF,CAAQV,EAAR,CAAL;IACA,IAAIM,CAAC,CAACD,CAAD,CAAL,EAAUC,CAAC,CAACD,CAAD,CAAD,IAAQD,EAAR,CAAV,CAAsB;IAAtB,KACKE,CAAC,CAAC,EAAED,CAAH,CAAD,GAASD,EAAT;EACN,CAnC2B,CAqC5B;EACA;;;EACA,OAAOE,CAAC,CAACO,MAAF,GAAW,CAAX,GAAgBN,CAAC,CAAC,CAAD,CAAD,GACjBV,GAAG,CAACU,CAAC,CAAC,CAAD,CAAD,CAAKK,CAAN,CADc,GAEjBjB,IAAI,CAACC,CAAD,CAFH,IAGAA,CAAC,GAAGW,CAAC,CAACM,MAAN,EAAc,UAASf,CAAT,EAAY;IACzB,KAAK,IAAIO,CAAC,GAAG,CAAR,EAAWS,CAAhB,EAAmBT,CAAC,GAAGT,CAAvB,EAA0B,EAAES,CAA5B,EAA+BC,CAAC,CAAC,CAACQ,CAAC,GAAGP,CAAC,CAACF,CAAD,CAAN,EAAWA,CAAZ,CAAD,GAAkBS,CAAC,CAACF,CAAF,CAAId,CAAJ,CAAlB;;IAC/B,OAAOQ,CAAC,CAACS,IAAF,CAAO,EAAP,CAAP;EACD,CANA,CAAP;AAOD"},"metadata":{},"sourceType":"module"}